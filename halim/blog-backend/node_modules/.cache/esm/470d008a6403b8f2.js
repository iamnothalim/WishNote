let Koa,Router,bodyParser,mongoose,api,jwtMiddleware;_640‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_640‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_640‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_640‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_640‍.w("./api",[["default",["api"],function(v){api=v}]]);_640‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require("dotenv").config();







//import createFakeData from "./createFakeData";

//비구조화 할당을 통해 process.env 내부값에 대한 레퍼런스 만듬
const { PORT, MONGO_URI } = process.env;

mongoose
  .connect(MONGO_URI, { useNewUrlParser: true, useFindAndModify: false })
  .then(() => {
    console.log("몽고디비 오랜만이얌");
  })
  .catch((e) => {
    _640‍.g.console.error(e);
  });

const app = new Koa();
const router = new Router();

router.use("/api", api.routes());

//라우터 적용전에 bodyparser적용
app.use(bodyParser());
app.use(jwtMiddleware);
//app instance에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;
app.listen(port, () => {
  _640‍.g.console.log("port %d", port);
});
